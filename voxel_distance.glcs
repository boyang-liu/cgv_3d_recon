#version 430

layout(local_size_x = 10, local_size_y = 10, local_size_z = 10) in;


struct Voxel
{
    int inside;
    uint colors;
};
layout(std430,binding = 1) buffer countbuffer{
 Voxel ids[];
};

uniform vec3 min;
uniform vec3 max;
uniform vec3 cam_pos1;
uniform vec3 cam_pos2;
uniform vec3 cam_pos3;
uniform float group_size;
uniform uvec3 resolution;
float distance_box_cam(int boxindex) {

/*vec3 boxcenter;
boxcenter[0]=(boxindex%height)step-boxlength;
boxcenter[1]=(boxindex-(boxindex%height%width))step-boxlength;
boxcenter[2]=(boxindex-(boxindex%height%length))step-boxlength;
float b_c_ditance;
b_c_ditance=sqrt(boxcenter[0]-cam[0])+sqrt(boxcenter[1]-cam[1])+sqrt(boxcenter[2]-cam[2]);
return b_c_distance*/

return 0;
}
float get_value(ivec3 idx) {
//	vec3 myvec=min+idx*step;
return 0;
}

void main() {

    // The voxel coordinates of this thread
    ivec3 idx = ivec3(gl_GlobalInvocationID);
    uint index = uint(resolution.z*resolution.y*idx.x+resolution.z*idx.y+idx.z);
	if(idx.x < max.x && idx.y < max.y && idx.z < max.z) {
		
		
		
	}

	

}
