#version 450

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;


layout (std430, binding = 10) buffer filledobjectBuffer
{
    float filledcubes[];
};

layout (std430, binding = 1) buffer cubesBuffer
{
    float cubes[];
};





uniform ivec3 cubeGridDims;
uniform int threshold;
uniform int range;

uniform vec3 min_pos;
uniform vec3 max_pos;
uniform float side_length;





int indexCube(int x, int y, int z){
    return (x + cubeGridDims.x * y + cubeGridDims.x * cubeGridDims.y * z) ;
}



float denoise(ivec3 VoxelID){


float value=0;
int n=range/2;
int x, y, z;
int range_sqr=range*range;
int size =range*range*range;
for (int i = 0; i < size; ++i)
{
	x =  (i % range)+VoxelID.x-n;
	y =  (i % range_sqr) / range+VoxelID.y-n;
	z =  (i /range_sqr)+VoxelID.z-n;
	if(x<cubeGridDims.x && x>=0 &&y<cubeGridDims.y && y>=0 &&z<cubeGridDims.z && z>=0)
		value=value+filledcubes[indexCube(x,y,z)];
}


if( value >= threshold )
	return 1.0;
else 
	return 0;

}
/*
box get_box(int x, int y, int z){
	
	float minx=min_pos.x+(x-1)*side_length;
	float miny=min_pos.y+(y-1)*side_length;
	float minz=min_pos.z+(z-1)*side_length;
	float maxx=max_pos.x+ x*side_length;
	float maxy=max_pos.y+ y*side_length;
	float maxz=max_pos.z+ z*side_length;

	return box(minx,miny,minz,maxx,maxy,maxz);


}
*/


void main() {

	
    // The voxel coordinates of this thread
	

	ivec3 id = ivec3(gl_GlobalInvocationID);
    
	int x = id.x;
    int y = id.y;
    int z = id.z;
	

    int currentCubeID = indexCube(x, y, z);
	
	if(filledcubes[currentCubeID] != 0)	
		cubes[currentCubeID] = denoise(ivec3(x,y,z));					
	else 
		cubes[currentCubeID] = 0;	
	
	
}
