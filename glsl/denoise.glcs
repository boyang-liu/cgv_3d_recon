#version 450

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;


layout (std430, binding = 9) buffer cubesBuffer
{
    float cubes[];
};

layout (std430, binding = 11) buffer denoisedcubesBuffer
{
    float denoisedcubes[];
};



uniform ivec3 cubeGridDims;
uniform int threshold;
uniform int range;






int indexCube(int x, int y, int z){
    return (x + cubeGridDims.x * y + cubeGridDims.x * cubeGridDims.y * z) ;
}

float denoise(ivec3 VoxelID){

float value=0;
int n=range/2;
int x, y, z;
int range_sqr=range*range;
int size =range*range*range;
for (int i = 0; i < size; ++i)
{
	x =  (i % range)+VoxelID.x-n;
	y =  (i % range_sqr) / range+VoxelID.y-n;
	z =  (i /range_sqr)+VoxelID.z-n;
	if(x<cubeGridDims.x && x>=0 &&y<cubeGridDims.y && y>=0 &&z<cubeGridDims.z && z>=0)
		value=value+cubes[indexCube(x,y,z)];
}


if( value >= threshold )
	return 1.0;
else 
	return 0;
}





void main() {

	
    // The voxel coordinates of this thread
	

	ivec3 id = ivec3(gl_GlobalInvocationID);
    
	int x = id.x;
    int y = id.y;
    int z = id.z;
	

    int currentCubeID = indexCube(x, y, z);
	
	if(cubes[currentCubeID]!=0)	
		denoisedcubes[currentCubeID] = denoise(ivec3(x,y,z));	
	else 
		denoisedcubes[currentCubeID] = 0;	
	

	//denoisedcubes[currentCubeID ] = 0.5;
}
